<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <import resource="${idp.home}/conf/services.xml" />

    <!--
    These are beans that define reloadable services. The actual Spring resources that configure the
    services are generally defined in the services.xml file edited by deployers.
    -->

    <bean id="shibboleth.LoggingService"
        class="%{idp.service.logging.class:net.shibboleth.idp.log.LogbackLoggingService}"
        p:loggingConfiguration="%{idp.service.logging.resource:%{idp.home}/conf/logback.xml}"
        p:reloadCheckDelay="%{idp.service.logging.checkInterval:PT0S}"
        p:failFast="%{idp.service.logging.failFast:%{idp.service.failFast:true}}" />
    
    <bean id="shibboleth.AttributeFilterService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
            depends-on="shibboleth.VelocityEngine"
            p:serviceConfigurations-ref="ExtendedAttributeFilterResources"
            p:failFast="%{idp.service.attribute.filter.failFast:%{idp.service.failFast:false}}"
            p:reloadCheckDelay="%{idp.service.attribute.filter.checkInterval:PT0S}"
            p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
            p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
        <constructor-arg name="claz" value="net.shibboleth.idp.attribute.filter.AttributeFilter" />
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.idp.attribute.filter.spring.impl.AttributeFilterServiceStrategy"
                id="ShibbolethAttributeFilter"/>
        </constructor-arg>
    </bean>
    <!-- Auto-append system config file to resource set. -->
    <bean id ="ExtendedAttributeFilterResources" class="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
          p:firstList="#{getObject('%{idp.service.attribute.filter.resources:shibboleth.AttributeFilterResources}'.trim())}" >
        <property name="secondList">
            <util:list >
                <value>classpath:/net/shibboleth/idp/conf/attribute-filter-system.xml</value>
            </util:list>
        </property>
    </bean>

    <bean id="shibboleth.AttributeResolverService" class="net.shibboleth.ext.spring.service.ReloadableSpringService" 
            depends-on="shibboleth.VelocityEngine"
            p:serviceConfigurations-ref="ExtendedAttributeResolverResources"
            p:failFast="%{idp.service.attribute.resolver.failFast:%{idp.service.failFast:false}}"
            p:reloadCheckDelay="%{idp.service.attribute.resolver.checkInterval:PT0S}"
            p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
            p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
        <constructor-arg name="claz" value="net.shibboleth.idp.attribute.resolver.AttributeResolver" />
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.idp.attribute.resolver.spring.impl.AttributeResolverServiceStrategy"
                p:suppressDisplayInformation="%{idp.service.attribute.resolver.suppressDisplayInfo:false}"
                p:stripNulls="%{idp.service.attribute.resolver.stripNulls:false}"
                id="ShibbolethAttributeResolver"/>
        </constructor-arg>
    </bean>
    <!-- Auto-append system config file to resource set. -->
    <bean id ="ExtendedAttributeResolverResources" class="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
          p:firstList="#{getObject('%{idp.service.attribute.resolver.resources:shibboleth.AttributeResolverResources}'.trim())}" >
        <property name="secondList">
            <util:list >
                <value>classpath:/net/shibboleth/idp/conf/attribute-resolver-system.xml</value>
            </util:list>
        </property>
    </bean>

    <bean id="shibboleth.AttributeRegistryService" class="net.shibboleth.ext.spring.service.ReloadableSpringService" 
            p:serviceConfigurations-ref="ExtendedAttributeRegistryResources"
	        p:failFast="%{idp.service.attribute.registry.failFast:%{idp.service.failFast:false}}"
	        p:reloadCheckDelay="%{idp.service.attribute.registry.checkInterval:PT0S}"
	        p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
	        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
	    <constructor-arg name="claz" value="net.shibboleth.idp.attribute.transcoding.AttributeTranscoderRegistry" />
	    <constructor-arg name="strategy">
	       <bean class="net.shibboleth.idp.attribute.transcoding.impl.AttributeRegistryServiceStrategy" />
	    </constructor-arg>
    </bean>
    <bean id ="shibboleth.DefaultAttributeRegistryResources" class="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
          p:firstList-ref="#{'%{idp.service.attribute.resolver.resources:shibboleth.AttributeResolverResources}'.trim()}" >
        <property name="secondList">
            <util:list >
                <value>%{idp.home}/conf/attribute-registry.xml</value>
            </util:list>
        </property>
    </bean>
    <!-- Auto-append system config file to resource set. -->
    <bean id ="ExtendedAttributeRegistryResources" class="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
          p:firstList="#{getObject('%{idp.service.attribute.registry.resources:shibboleth.AttributeRegistryResources}'.trim()) ?:
                getObject('shibboleth.DefaultAttributeRegistryResources')}" >
        <property name="secondList">
            <util:list >
                <value>classpath:/net/shibboleth/idp/conf/attribute-registry-system.xml</value>
            </util:list>
        </property>
    </bean>

    <bean id="shibboleth.NameIdentifierGenerationService" class="net.shibboleth.ext.spring.service.ReloadableSpringService" 
        c:claz="net.shibboleth.idp.saml.nameid.NameIdentifierGenerationService"
        p:serviceConfigurations-ref="ExtendedNameIdentifierGenerationResources"
        p:failFast="%{idp.service.nameidGeneration.failFast:%{idp.service.failFast:false}}"
        p:reloadCheckDelay="%{idp.service.nameidGeneration.checkInterval:PT0S}"
        p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer" />
    <!-- Auto-append system config file to resource set. -->
    <bean id ="ExtendedNameIdentifierGenerationResources" class="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
          p:firstList-ref="#{'%{idp.service.nameidGeneration.resources:shibboleth.NameIdentifierGenerationResources}'.trim()}" >
        <property name="secondList">
            <util:list >
                <value>classpath:/net/shibboleth/idp/conf/saml-nameid-system.xml</value>
            </util:list>
        </property>
    </bean>

    <bean id="shibboleth.RelyingPartyResolverService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
            p:serviceConfigurations-ref="ExtendedRelyingPartyResolverResources"
            p:failFast="%{idp.service.relyingparty.failFast:%{idp.service.failFast:false}}"
            p:reloadCheckDelay="%{idp.service.relyingparty.checkInterval:PT0S}"
            p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
            p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
        <constructor-arg name="claz" value="net.shibboleth.idp.relyingparty.RelyingPartyConfigurationResolver" />
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.ext.spring.service.ClassBasedServiceStrategy"
                c:serviceableClaz="net.shibboleth.idp.relyingparty.impl.DefaultRelyingPartyConfigurationResolver" />
        </constructor-arg>
    </bean>
    <!-- Auto-append system config file to resource set. -->
    <bean id ="ExtendedRelyingPartyResolverResources" class="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
          p:firstList-ref="#{'%{idp.service.relyingparty.resources:shibboleth.RelyingPartyResolverResources}'.trim()}" >
        <property name="secondList">
            <util:list >
                <value>classpath:/net/shibboleth/idp/conf/relying-party-system.xml</value>
            </util:list>
        </property>
    </bean>

    <bean id="shibboleth.MetadataResolverService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
            depends-on="shibboleth.AttributeRegistryService" 
            p:serviceConfigurations-ref="ExtendedMetadataResolverResources"
            p:failFast="%{idp.service.metadata.failFast:%{idp.service.failFast:false}}"
            p:reloadCheckDelay="%{idp.service.metadata.checkInterval:PT0S}"
            p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer"
            p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor">
        <constructor-arg name="claz" value="org.opensaml.saml.metadata.resolver.MetadataResolver" />
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.idp.profile.spring.relyingparty.metadata.impl.MetadataResolverServiceStrategy" />
        </constructor-arg>
    </bean>
    <!-- Auto-append system config file to resource set. -->
    <bean id ="ExtendedMetadataResolverResources" class="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
          p:firstList-ref="#{'%{idp.service.metadata.resources:shibboleth.MetadataResolverResources}'.trim()}" >
        <property name="secondList">
            <util:list >
                <value>classpath:/net/shibboleth/idp/conf/metadata-providers-system.xml</value>
            </util:list>
        </property>
    </bean>

    <bean id="shibboleth.ReloadableAccessControlService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
        c:claz="net.shibboleth.utilities.java.support.security.AccessControlService" 
        p:serviceConfigurations-ref="ExtendedAccessControlResources"
        p:failFast="%{idp.service.access.failFast:%{idp.service.failFast:true}}"
        p:reloadCheckDelay="%{idp.service.access.checkInterval:PT0S}"
        p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer" />
    <!-- Auto-append system config file to resource set. -->
    <bean id ="ExtendedAccessControlResources" class="net.shibboleth.ext.spring.factory.CombiningListFactoryBean"
          p:firstList-ref="#{'%{idp.service.access.resources:shibboleth.AccessControlResources}'.trim()}" >
        <property name="secondList">
            <util:list >
                <value>classpath:/net/shibboleth/idp/conf/access-control-system.xml</value>
            </util:list>
        </property>
    </bean>

    <bean id="shibboleth.ReloadableCASServiceRegistry" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
          c:claz="net.shibboleth.idp.cas.service.ServiceRegistry"
          p:serviceConfigurations="#{getObject('%{idp.service.cas.registry.resources:shibboleth.CASServiceRegistryResources}'.trim()) ?:
                getObject('shibboleth.DefaultCASServiceRegistryResources')}"
          p:failFast="%{idp.service.cas.registry.failFast:%{idp.service.failFast:false}}"
          p:reloadCheckDelay="%{idp.service.cas.registry.checkInterval:PT0S}"
          p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
          p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer" />
    
    <!-- This default populates the service with an empty CAS registry as a substitute for a real config. -->
    <util:list id="shibboleth.DefaultCASServiceRegistryResources">
        <bean class="net.shibboleth.ext.spring.resource.ConditionalResource" c:wrapped="%{idp.home}/conf/cas-protocol.xml">
            <property name="defaultContent">
                <value>
                <![CDATA[
                    <beans xmlns="http://www.springframework.org/schema/beans"
                           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                           xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
                           default-init-method="initialize"
                           default-destroy-method="destroy">
                        <bean id="reloadableServiceRegistry" class="net.shibboleth.idp.cas.service.PatternServiceRegistry" />
                    </beans>
                ]]>
                </value>
            </property>
        </bean>
    </util:list>

    <bean id="shibboleth.ManagedBeanService" class="net.shibboleth.ext.spring.service.ReloadableSpringService" 
            c:claz="org.springframework.context.ApplicationContext"
            p:serviceConfigurations="#{getObject('%{idp.service.managedBean.resources:shibboleth.ManagedBeanResources}'.trim()) ?:
                getObject('shibboleth.DefaultManagedBeanResources')}"
            p:failFast="%{idp.service.managedBean.failFast:%{idp.service.failFast:false}}"
            p:reloadCheckDelay="%{idp.service.managedBean.checkInterval:PT0S}"
            p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
            p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.ext.spring.service.ApplicationContextServiceStrategy" />
        </constructor-arg>
    </bean>
    <util:list id="shibboleth.DefaultManagedBeanResources">
        <value>%{idp.home}/conf/managed-beans.xml</value>
    </util:list>

    <!--
    These are proxies/facades that expose a service-unaware interface to client components.
    Services without such facades are being consumed directly in a service-aware way.
    -->
    
    <bean id="shibboleth.RelyingPartyConfigurationResolver"
        class="net.shibboleth.idp.relyingparty.impl.ReloadingRelyingPartyConfigurationResolver"
        c:resolverService-ref="shibboleth.RelyingPartyResolverService" />
        
    <bean id="shibboleth.CriteriaRelyingPartyConfigurationResolver" 
        class="net.shibboleth.idp.relyingparty.impl.DelegatingCriteriaRelyingPartyConfigurationResolver"
        p:delegate-ref="shibboleth.RelyingPartyConfigurationResolver" />
        
    <bean id="shibboleth.MetadataResolver"
        class="net.shibboleth.idp.saml.metadata.impl.ReloadingRelyingPartyMetadataProvider"
        c:resolverService-ref="shibboleth.MetadataResolverService" />
        
    <bean id="shibboleth.RoleDescriptorResolver"
        class="org.opensaml.saml.metadata.resolver.impl.PredicateRoleDescriptorResolver"
        c:mdResolver-ref="shibboleth.MetadataResolver" />   
        
    <bean id="shibboleth.AccessControlService"
        class="net.shibboleth.utilities.java.support.security.impl.DelegatingAccessControlService"
        c:acService-ref="shibboleth.ReloadableAccessControlService" />

    <bean id="shibboleth.CASServiceRegistry"
          class="net.shibboleth.idp.cas.service.impl.ReloadingServiceRegistry"
          c:delegate-ref="shibboleth.ReloadableCASServiceRegistry" />

    <bean id="shibboleth.CASMetadataServiceRegistry"
          class="net.shibboleth.idp.cas.service.impl.MetadataServiceRegistry"
          c:resolver-ref="shibboleth.RoleDescriptorResolver" />
          
 </beans>
